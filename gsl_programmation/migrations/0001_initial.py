# Generated by Django 5.1.1 on 2024-12-11 15:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("gsl_core", "0004_alter_adresse_commune_alter_adresse_postal_code_and_more"),
        ("gsl_projet", "0005_projet_assiette"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Enveloppe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("DETR", "DETR"), ("DSIL", "DSIL")],
                        verbose_name="Type",
                    ),
                ),
                (
                    "montant",
                    models.DecimalField(
                        decimal_places=2, max_digits=14, verbose_name="Montant"
                    ),
                ),
                ("annee", models.IntegerField(verbose_name="Ann√©e")),
                (
                    "deleguee_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gsl_programmation.enveloppe",
                        verbose_name="Enveloppe d√©l√©gu√©e",
                    ),
                ),
                (
                    "perimetre_arrondissement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gsl_core.arrondissement",
                        verbose_name="P√©rim√®tre d‚Äôarrondissement",
                    ),
                ),
                (
                    "perimetre_departement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gsl_core.departement",
                        verbose_name="P√©rim√®tre d√©partemental",
                    ),
                ),
                (
                    "perimetre_region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gsl_core.region",
                        verbose_name="P√©rim√®tre r√©gional",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Scenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(verbose_name="Titre")),
                ("slug", models.SlugField(unique=True, verbose_name="Cl√© d‚ÄôURL")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enveloppe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gsl_programmation.enveloppe",
                        verbose_name="Dotation associ√©e",
                    ),
                ),
            ],
            options={
                "verbose_name": "Simulation de programmation",
                "verbose_name_plural": "Simulations de programmation",
            },
        ),
        migrations.CreateModel(
            name="SimulationProjet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "montant",
                    models.DecimalField(
                        decimal_places=2, max_digits=14, verbose_name="Montant"
                    ),
                ),
                (
                    "taux",
                    models.DecimalField(
                        decimal_places=2, max_digits=4, verbose_name="Taux"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "üîÑ En traitement"),
                            ("valid", "‚úÖ  Accept√©"),
                            ("provisoire", "‚úîÔ∏è Accept√© provisoirement"),
                            ("cancelled", "‚ùå Refus√©"),
                        ],
                        default="draft",
                        verbose_name="√âtat",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enveloppe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gsl_programmation.enveloppe",
                    ),
                ),
                (
                    "projet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gsl_projet.projet",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gsl_programmation.scenario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Simulation de programmation projet",
                "verbose_name_plural": "Simulations de programmation projet",
            },
        ),
        migrations.AddConstraint(
            model_name="enveloppe",
            constraint=models.UniqueConstraint(
                fields=(
                    "annee",
                    "type",
                    "perimetre_region",
                    "perimetre_departement",
                    "perimetre_arrondissement",
                ),
                name="unicity_by_perimeter_and_type",
                nulls_distinct=False,
            ),
        ),
        migrations.AddConstraint(
            model_name="enveloppe",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("perimetre_region__isnull", False),
                    ("perimetre_departement__isnull", False),
                    ("perimetre_arrondissement__isnull", False),
                    _connector="XOR",
                ),
                name="only_one_perimeter",
                violation_error_message="Un seul type de p√©rim√®tre doit √™tre renseign√© parmi les trois possibles.",
            ),
        ),
        migrations.AddConstraint(
            model_name="enveloppe",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("type", "DSIL"), _negated=True),
                    models.Q(
                        ("deleguee_by__isnull", True),
                        ("perimetre_region__isnull", False),
                    ),
                    models.Q(
                        ("deleguee_by__isnull", False),
                        models.Q(
                            ("perimetre_departement__isnull", False),
                            ("perimetre_arrondissement__isnull", False),
                            _connector="XOR",
                        ),
                    ),
                    _connector="OR",
                ),
                name="dsil_regional_perimeter",
                violation_error_message="Il faut pr√©ciser un p√©rim√®tre r√©gional pour une enveloppe de type DSIL non d√©l√©gu√©e.",
            ),
        ),
        migrations.AddConstraint(
            model_name="enveloppe",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("type", "DETR"), _negated=True),
                    models.Q(
                        ("deleguee_by__isnull", True),
                        ("perimetre_departement__isnull", False),
                    ),
                    models.Q(
                        ("deleguee_by__isnull", False),
                        ("perimetre_arrondissement__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="detr_departemental_perimeter",
                violation_error_message="Il faut pr√©ciser un p√©rim√®tre d√©partemental pour une enveloppe de type DETR non d√©l√©gu√©e.",
            ),
        ),
        migrations.AddConstraint(
            model_name="simulationprojet",
            constraint=models.UniqueConstraint(
                fields=("projet", "scenario", "enveloppe"),
                name="unique_projet_enveloppe_projet",
                nulls_distinct=True,
            ),
        ),
        migrations.AddConstraint(
            model_name="simulationprojet",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "valid")),
                fields=("projet", "enveloppe"),
                name="unique_valid_simulation_per_project",
            ),
        ),
    ]
